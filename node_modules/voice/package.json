{
  "name": "voice",
  "version": "0.0.0",
  "homepage": "https://github.com/dominictarr/voice",
  "repository": {
    "type": "git",
    "url": "git://github.com/dominictarr/voice.git"
  },
  "dependencies": {
    "baudio": "0.1.2",
    "inherits": "1.0.0"
  },
  "devDependencies": {
    "tap": "0.3.0"
  },
  "scripts": {
    "test": "tap test"
  },
  "author": {
    "name": "'Dominic Tarr'",
    "email": "dominic.tarr@gmail.com",
    "url": "http://dominictarr.com"
  },
  "license": "MIT",
  "readme": "# Voice\n\nGenerate musical voices with FM synthesis.\n\n### example\n\n``` js\n\nvar Voice = require('../voice')\nvar Env   = require('../envelope')\nvar Comp  = require('../composite')\nvar ae, ce\n\nvar comp = new Comp(function (c, d, ae, ce) {\n   return (\n      c.harmonic(\n        d.sample()    // modululate the freq of c \n                      // by the amplitude of d\n        * ce.sample() // and an envelope\n        * 8\n      ).sample()\n      * ae.sample() //modulate the output amplitude\n    )\n}, [\n  new Voice().octave(1),    //carrier oscillator\n  new Voice().octave(0.5),  //modulator oscillator\n  ae = new Env(0.001, 3, 0, 1),  //amplitude envelope\n  ce = new Env(1, 3, 1)          //modulation envelope\n])\n\nae.trigger()\nce.trigger()\n\n```\n\n### Voice\n\nGenerate a sine wave...  \n(and then modulate it's pitch with other oscillators & envelopes)\n\n#### .pitch(p) .octave(o) .harmonic(h)\n\ncontrol the frequence by altering pitch (semitones) setting the octave,\nor by just multiplying the frequency. (harmonic)\n\n#### .sample()\n\nget the amplitude for the next sample.  \ndo not call this twice per sample.\n\n### Envelope (attack, decay, aSteepness, dSteepness)\n\nAn envelope is used to control the shape of a sound.\nit has two parts, `attack` and `decay`\n\n`attack` is the length of time it takes for the envelope to reach 1\n`decay` is the length of time it takes for the envelope to return to 0\n\nthe attack and decay are both parabolic.  \nby altering the steepness parameter, \nyou can set whether the decay drops away quickly (steepness > 1)\nor stays high and then drops away. (0 < steepness < 1)\n\n#### .trigger()\n\ncall `.trigger()` to start the attack again.\n\n#### .sample()\n\nlike for `Voice`, get the amplitude of the envlope for this sample.\n\n#### Composite (sampleFunction, [children])\n\nCreate a new Voice from a assortment of `Voices` and `Envelopes`.\nYou must implement the `sample` method \n(in terms of the sample methods of the parts).\nThe other methods are added for you.\n\nA `Composite` has all the methods of `Voice` and `Envelope`.\nCalling these will pass the call through to the children that have that method.\n(so `.trigger()` will call trigger on all the child envelopes)\n\nSee the examples folder!\n\n## License\n\nMIT\n",
  "readmeFilename": "README.md",
  "description": "Generate musical voices with FM synthesis.",
  "bugs": {
    "url": "https://github.com/dominictarr/voice/issues"
  },
  "_id": "voice@0.0.0",
  "dist": {
    "shasum": "f42336487026652f1c1de634121cf5f354842f45"
  },
  "_from": "voice@",
  "_resolved": "https://registry.npmjs.org/voice/-/voice-0.0.0.tgz"
}
